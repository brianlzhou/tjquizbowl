#!/bin/bash

echo "hellos $(whoami)"

thisdir=$1
filename=$2 # changed to $2 since $1 now contains the working folder
fps=$3
filter=$4
magickoptions=$5
alphaColor=$6

convert=$thisdir/convert
ffmpeg=$thisdir/ffmpeg
noupload=0
speed=1
echo "creating temp"
#temp=$(mktemp $thisdir/tempfile.XXXXXXXXX)
temp=$(mktemp /tmp/tempfile.XXXXXXXXX)
whoami=$(whoami)


#todo: this is probably not necessary, try and remove it in an isolated experiment
export DYLD_LIBRARY_PATH=$thisdir:$DYLD_LIBRARY_PATH

echo "****** hello from the modified gifify"
echo "----"
echo "thisdir:      $thisdir"
echo "filename:     $filename"
echo "convert:      $convert"
echo "ffmpeg:       $ffmpeg"
echo "fps:          $fps"
echo "temp:         $temp"
echo "whoami:       $whoami"
echo "dyldpath:      $DYLD_LIBRARY_PATH"
echo "filter:        $filter"
echo "alphaColor:  $alphaColor"
echo "----"
echo "Let's begin"


function printHelpAndExit {
  echo 'Usage:'
  echo '  gifify [options] filename'
  echo ''
  echo 'Options: (all optional)'
  echo '  c CROP:   The x and y crops, from the top left of the image, i.e. 640:480'
  echo '  o OUTPUT: The basename of the file to be output (default "output")'
  echo '  n:        Do not upload the resulting image to CloudApp'
  echo '  r FPS:    Output at this (frame)rate (default 10)'
  echo '  s SPEED:  Output using this speed modifier (default 1)'
  echo '            NOTE: GIFs max out at 100fps depending on platform. For consistency,'
  echo '            ensure that FPSxSPEED is not > ~60!'
  echo '  p SCALE:  Rescale the output, e.g. 320:240'
  echo '  x:        Remove the original file and resulting .gif once the script is complete'
  echo ''
  echo 'Example:'
  echo '  gifify -c 240:80 -o my-gif -x my-movie.mov'
  exit $1
}

OPTERR=0

while getopts "c:o:p:r:s:nx" opt; do
  case $opt in
    c) crop=$OPTARG;;
    h) printHelpAndExit 0;;
    o) output=$OPTARG;;
    n) noupload=1;;
    p) scale=$OPTARG;;
    r) fps=$OPTARG;;
    s) speed=$OPTARG;;
    x) cleanup=1;;
    *) printHelpAndExit 1;;
  esac
done

shift $(( OPTIND - 1 ))



if [ -z ${output} ]; then
  output=$filename
fi

if [ -z "$filename" ]; then printHelpAndExit 1; fi

if [ $crop ]; then
  crop="crop=${crop}:0:0"
else
  crop=
fi



#if [ $scale ]; then
#  scale="scale=${scale}"
#else
#  scale=
#fi
#
#if [ $scale ] || [ $crop ]; then
#  filter="-vf $scale$crop"
#else
#  filter=
#fi

# -delay uses time per tick (a tick defaults to 1/100 of a second)
# so 60fps == -delay 1.666666 which is rounded to 2 because convert
# apparently stores this as an integer. To animate faster than 60fps,
# you must drop frames, meaning you must specify a lower -r. This is
# due to the GIF format as well as GIF renderers that cap frame delays
# < 3 to 3 or sometimes 10. Source:
# http://humpy77.deviantart.com/journal/Frame-Delay-Times-for-Animated-GIFs-214150546
echo "Exporting movie with fps: $fps"

delay=$(bc -l <<< "100/$fps/$speed")

echo "Calling ffmpeg for filename: $filename to temp: $temp with filter: $filter"
"$ffmpeg" -loglevel panic -stats -i "$filename" $filter -r $fps -f image2pipe -vcodec ppm - >> "$temp"

echo "Calling Convert"

#cat $temp | $convert +dither -layers Optimize -remap $thisdir/limitedmaterial.gif -delay $delay - "${output}.gif"
#echo "cat "$temp" | "$convert" +dither -layers Optimize $magickoptions $colorOptions -delay $delay - "${output}.gif""
cat "$temp" | "$convert" +dither -layers Optimize $magickoptions -delay $delay - "${output}.gif"

# run an extra pass if the user has chosen an alphacolor
if [ ! -z $alphaColor ]; then
    echo "Calling Convert again for transparency of $alphaColor"
    echo     $convert "${output}.gif" -transparent "\"#$alphaColor\"" "${output}-alpha.gif"
    $convert "${output}.gif" -transparent "\"#$alphaColor\" "${output}-alpha.gif"
fi


if [ $noupload -ne 1 ]; then
# open -a CloudApp "${output}.gif"

  if [ $cleanup ]; then
    rm "$filename"
    rm "${output}.gif"
  fi
else
  echo "${output}.gif"
fi

echo "removing temp file"
rm "$temp"

echo 'Done making gifs'